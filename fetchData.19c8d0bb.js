parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"k3YC":[function(require,module,exports) {
module.exports="/Filmoteka-team-02/no_picture.1801d039.jpg";
},{}],"rV7j":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.noPosterImage=exports.renderMoviesInputTitle=exports.renderMoviesFirstLoad=exports.fetchMoviesByGenre=exports.fetchMovieById=exports.fetchInputMovieTitle=exports.fetchFirstLoadMovies=exports.paginationButtons=exports.galleryOfMovies=exports.inputFormGenreChange=exports.inputFormTitle=exports.inputFormButton=void 0;const e=document.querySelector(".search-form__input");exports.inputFormTitle=e;const t=document.querySelector(".search-form__btn");exports.inputFormButton=t;const n=document.querySelector(".header__genre-option");exports.inputFormGenreChange=n;const a=document.querySelector(".gallery_movies");exports.galleryOfMovies=a;const i=document.querySelector(".genres"),o=document.querySelector(".pagination_buttons");exports.paginationButtons=o;const s=require("../images/misc/no_picture.jpg");exports.noPosterImage=s;const r="?api_key=fd87aef18dfd3a2446d882cb85b7272d",c="https://api.themoviedb.org/3",d="/trending/all/day",l="/search/movie",p="/discover/movie",m="/genre/movie/list",v="/genre/tv/list",_="/trending/movie/day",g="/trending/movie/week",u=async e=>{const t=await fetch(`${c}${d}${r}&page=${e}&include_adult=false`);return await t.json()};exports.fetchFirstLoadMovies=u;const $=async(e,t)=>{const n=await fetch(`${c}/search/movie${r}&query=${t}&page=${e}&include_adult=false`);return await n.json()};exports.fetchInputMovieTitle=$;const y=async(e,t="movie")=>{const n=await fetch(`${c}/${t}/${e}${r}`);return await n.json()};exports.fetchMovieById=y;const f=async(e,t)=>{const n=await fetch(`${c}/discover/movie${r}&page=${e}&include_adult=false&with_genres=${t}`);return await n.json()};exports.fetchMoviesByGenre=f;let h=async e=>{const t=await F();a.innerHTML="";const n=e.map(({poster_path:e,title:n,name:a,genre_ids:i,release_date:o,first_air_date:r,vote_average:c,id:d,media_type:l,original_title:p,original_name:m})=>`\n                <li class="movie-card" data-id="${d}" data-type="${l}">\n                    <img class="movie-card__img" src="${null!=e?`https://image.tmdb.org/t/p/w500/${e}`:s}" alt="poster of '${n||a}'"  loading="lazy"/>\n                    <h2 class="movie-card__title">${n||a}</h2>\n                    <div class="movie-card__info">\n                        <p class="movie-card__genre-and-year">\n                            <span class="movie-card__genre">${i.map(e=>t[e]).splice(0,2).join(", ")}</span>\n                            <span class="movie-card__year">| ${(o||(r||"no-data")).slice(0,4)}</span>\n                        </p>\n                        <p class="movie-card__vote-average">${c.toFixed(2)}</p>\n                    </div>\n                </li>\n            `).join("");return a.insertAdjacentHTML("beforeend",n)};exports.renderMoviesFirstLoad=h;let x=async e=>{const t=await F();a.innerHTML="";const n=e.map(({poster_path:e,title:n,name:a,genre_ids:i,release_date:o,first_air_date:r,vote_average:c,id:d,media_type:l,original_title:p,original_name:m})=>`\n                <li class="movie-card" data-id="${d}" data-type="movie">\n                    <img class="movie-card__img" src="${null!=e?`https://image.tmdb.org/t/p/w500/${e}`:s}" alt="${n||a}" loading="lazy" />\n                    <h2 class="movie-card__title">${n||a}</h2>\n\n                    <div class="movie-card__info">\n                        <p class="movie-card__genre-and-year">\n                            <span class="movie-card__genre">${i.map(e=>t[e]).splice(0,2).join(", ")}</span>\n                            <span class="movie-card__year">${(o||(r||"no-data")).slice(0,4)}</span>\n                        </p>\n                        <p class="movie-card__vote-average">${c.toFixed(2)}</p>\n                    </div>\n                </li>\n            `).join("");return a.insertAdjacentHTML("beforeend",n)};exports.renderMoviesInputTitle=x;const M=async()=>{const e=await fetch(`${c}/genre/movie/list${r}&language=en-US`),t=await fetch(`${c}/genre/tv/list${r}&language=en-US`),n=await e.json(),a=await t.json(),i=[...new Map([...n.genres,...a.genres].map(e=>[e.id,e])).values()];return j=i,i};let w,j;const F=async()=>(w||(w=await M()),w.reduce((e,t)=>({...e,[t.id]:t.name}),{}));let T=()=>{i.innerHTML="";const e=j.map(e=>`\n                <div>\n                    <ul>\n                        <li class="genres">${e}</li>\n                    </ul>\n                </div>\n            `).join("");return i.insertAdjacentHTML("beforeend",e)};
},{"../images/misc/no_picture.jpg":"k3YC"}]},{},["rV7j"], null)
//# sourceMappingURL=/Filmoteka-team-02/fetchData.19c8d0bb.js.map