{"version":3,"sources":["js/fetchData.js"],"names":["inputFormTitle","document","querySelector","inputFormButton","inputFormGenreChange","galleryOfMovies","genresList","paginationButtons","noPosterImage","require","API_KEY","BASE_URL","MAIN_PAGE_URL","SEARCH_MOVIE_URL","DISCOVER_MOVIE_URL","GENRE_MOVIE_LIST_URL","GENRE_TV_LIST_URL","TRENDING_DAY_URL","TRENDING_WEEK_URL","fetchFirstLoadMovies","response","fetch","page","firstLoadMovies","json","fetchInputMovieTitle","movieTitle","responseObject","fetchMovieById","movieId","type","fetchMoviesByGenre","genre","renderMoviesFirstLoad","genreName","getMovieGenresNames","innerHTML","markup","data","map","poster_path","title","name","genre_ids","release_date","first_air_date","vote_average","id","media_type","original_title","original_name","splice","join","slice","toFixed","insertAdjacentHTML","renderMoviesInputTitle","getAllGenres","responseGenresMovie","responseGenresTV","genresMovieList","genresTVList","allGenresList","Map","genres","values","allGenresListMain","genreResponse","reduce","allGenres","printAllGenresList"],"mappings":"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","file":"fetchData.8ad074aa.js","sourceRoot":"../src","sourcesContent":["const inputFormTitle = document.querySelector('.search-form__input');\nconst inputFormButton = document.querySelector('.search-form__btn');\nconst inputFormGenreChange = document.querySelector('.header__genre-option');\n\nconst galleryOfMovies = document.querySelector('.gallery_movies');\nconst genresList = document.querySelector('.genres');\nconst paginationButtons = document.querySelector('.pagination_buttons');\nconst noPosterImage = require('../images/misc/no_picture.jpg');\n\n// SPIS TREŚCI:\n// Scenariusz 1: FIRST LOAD\n// Scenariusz 2: SEARCH MOVIE\n// Scenariusz 3: GENRE SELECT\n// Scenariusz 4: TRENDING DAY / TRENDING WEEK (umówmy się, że klient odrzucił tę funkcjonalność :)\n\n// Ustalanie gatunku/gatunków filmu\n// Paginacja\n\nconst API_KEY = '?api_key=fd87aef18dfd3a2446d882cb85b7272d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_URL = '/trending/all/day';\nconst SEARCH_MOVIE_URL = '/search/movie';\nconst DISCOVER_MOVIE_URL = '/discover/movie';\nconst GENRE_MOVIE_LIST_URL = '/genre/movie/list';\nconst GENRE_TV_LIST_URL = '/genre/tv/list';\nconst TRENDING_DAY_URL = '/trending/movie/day';\nconst TRENDING_WEEK_URL = '/trending/movie/week';\n\n// Scenariusz 1: FIRST LOAD krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WEJŚCIU na stronę\nconst fetchFirstLoadMovies = async page => {\n  const response = await fetch(\n    `${BASE_URL}${MAIN_PAGE_URL}${API_KEY}&page=${page}&include_adult=false`,\n  );\n  const firstLoadMovies = await response.json();\n  return firstLoadMovies;\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WPISANIU FILMU\nconst fetchInputMovieTitle = async (page, movieTitle) => {\n  const response = await fetch(\n    `${BASE_URL}${SEARCH_MOVIE_URL}${API_KEY}&query=${movieTitle}&page=${page}&include_adult=false`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Pobranie pojedyńczego filmu/serialu przez Id. Opcje dla type to domyślnie 'movie' (parametr opcjonalny) lub serial 'tv'.\nconst fetchMovieById = async (movieId, type = 'movie') => {\n  const response = await fetch(`${BASE_URL}/${type}/${movieId}${API_KEY}`);\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 3: SEARCH MOVIE krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WYBRANIU GATUNKU z LISTY ROZWIJANEJ\nconst fetchMoviesByGenre = async (page, genre) => {\n  const response = await fetch(\n    `${BASE_URL}${DISCOVER_MOVIE_URL}${API_KEY}&page=${page}&include_adult=false&with_genres=${genre}`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 1: FIRST LOAD krok 2\n// Tworzenie galerii filmów po WEJŚCIU na stronę (lub przeładowaniu)\nlet renderMoviesFirstLoad = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"${media_type}\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"poster of '${title ? title : name}'\"  loading=\"lazy\"/>\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .splice(0, 2)\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">| ${(release_date\n                              ? release_date\n                              : first_air_date\n                              ? first_air_date\n                              : 'no-data'\n                            ).slice(0, 4)}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 2\n// Tworzenie galerii po WPISANIU FILMU w input\nlet renderMoviesInputTitle = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"movie\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"${title ? title : name}\" loading=\"lazy\" />\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .splice(0, 2)\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">${(release_date\n                              ? release_date\n                              : first_air_date\n                              ? first_air_date\n                              : 'no-data'\n                            ).slice(0, 4)}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n//-----------------------------------------------------------------//\n// ZNALEZIENIE LISTY WSZYSTKICH GATUNKÓW FILMÓW\n// z obu podzbiorów bazy danych: Movie oraz TV\n\nconst getAllGenres = async () => {\n  const responseGenresMovie = await fetch(\n    `${BASE_URL}${GENRE_MOVIE_LIST_URL}${API_KEY}&language=en-US`,\n  );\n  const responseGenresTV = await fetch(`${BASE_URL}${GENRE_TV_LIST_URL}${API_KEY}&language=en-US`);\n\n  const genresMovieList = await responseGenresMovie.json();\n  const genresTVList = await responseGenresTV.json();\n\n  const allGenresList = [\n    ...new Map(\n      [...genresMovieList.genres, ...genresTVList.genres].map(genre => [genre['id'], genre]),\n    ).values(),\n  ];\n  allGenresListMain = allGenresList;\n  return allGenresList;\n};\nlet genreResponse;\n\nlet allGenresListMain;\n\n// ZNALEZIENIE NAZW GATUNKÓW FILMÓW Z ICH NUMERÓW ID\n\nconst getMovieGenresNames = async () => {\n  if (!genreResponse) {\n    genreResponse = await getAllGenres();\n  }\n  return genreResponse.reduce((allGenres, genre) => {\n    return { ...allGenres, [genre.id]: genre.name };\n  }, {});\n};\n\nlet printAllGenresList = () => {\n  genresList.innerHTML = '';\n  const markup = allGenresListMain\n    .map(genre => {\n      return `\n                <div>\n                    <ul>\n                        <li class=\"genres\">${genre}</li>\n                    </ul>\n                </div>\n            `;\n    })\n    .join('');\n  return genresList.insertAdjacentHTML('beforeend', markup);\n};\n\nprintAllGenresList;\n\n//-----------------------------------------------------------------//\n\nexport {\n  inputFormButton,\n  inputFormTitle,\n  inputFormGenreChange,\n  galleryOfMovies,\n  paginationButtons,\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  fetchMovieById,\n  fetchMoviesByGenre,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n  noPosterImage,\n};\n"]}