{"version":3,"sources":["js/fetchData.js","js/genres.json","js/libraryHelper.js","js/utils.js","js/modal.js","js/pagination.js","js/filterByGenres.js"],"names":["inputFormTitle","document","querySelector","inputFormButton","inputFormGenreChange","galleryOfMovies","genresList","paginationButtons","noPosterImage","require","API_KEY","BASE_URL","MAIN_PAGE_URL","SEARCH_MOVIE_URL","DISCOVER_MOVIE_URL","GENRE_MOVIE_LIST_URL","GENRE_TV_LIST_URL","TRENDING_DAY_URL","TRENDING_WEEK_URL","fetchFirstLoadMovies","response","fetch","page","firstLoadMovies","json","fetchInputMovieTitle","movieTitle","responseObject","fetchMovieById","movieId","type","fetchMoviesByGenre","genre","renderMoviesFirstLoad","genreName","getMovieGenresNames","innerHTML","markup","data","map","poster_path","title","name","genre_ids","release_date","first_air_date","vote_average","id","media_type","original_title","original_name","splice","join","slice","toFixed","insertAdjacentHTML","renderMoviesInputTitle","getAllGenres","responseGenresMovie","responseGenresTV","genresMovieList","genresTVList","allGenresList","Map","genres","values","allGenresListMain","genreResponse","reduce","allGenres","printAllGenresList","module","exports","getAllLibraryMovies","libraryList","listType","moviesList","setAttribute","tempObj","undefined","movie","then","res","push","save","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","load","getItem","parse","remove","removeItem","addToLibrary","tempWatchedList","alreadyInList","forEach","alert","removeFromLibrary","filter","modalElement","closeBtn","addEventListener","event","target","matches","closest","classList","add","e","code","addModalListenerFunction","querySelectorAll","element","getMovieAndDisplayModal","dataset","movieDetails","log","onWatched","onQueue","modalHTML","vote_count","popularity","overview","watchedBtn","queueBtn","checkIfOnList","button","listTypeText","watched","location","href","includes","listtype","tempLibraryList","paginationContainer","createPagination","total_pages","query","mainDiv","createElement","first","previous","next","last","threeDots1","threeDots2","ariaDisabled","createLinkInputMovie","createLinkGenreMovie","createLinkAllMovies","appendChild","generateMainPagesButtons","tempPage","index","pageAnchor","testPage","testLastPage","results","handleGenreListClick","selectDivText","selectedGenreId","selectedGenreIdNotFound","getAllMoviesByGenre","idNotFound","array"],"mappings":"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","file":"filterByGenres.3424bb6e.js","sourceRoot":"../src","sourcesContent":["const inputFormTitle = document.querySelector('.search-form__input');\nconst inputFormButton = document.querySelector('.search-form__btn');\nconst inputFormGenreChange = document.querySelector('.header__genre-option');\n\nconst galleryOfMovies = document.querySelector('.gallery_movies');\nconst genresList = document.querySelector('.genres');\nconst paginationButtons = document.querySelector('.pagination_buttons');\nconst noPosterImage = require('../images/misc/no_picture.jpg');\n\n// SPIS TREŚCI:\n// Scenariusz 1: FIRST LOAD\n// Scenariusz 2: SEARCH MOVIE\n// Scenariusz 3: GENRE SELECT\n// Scenariusz 4: TRENDING DAY / TRENDING WEEK (umówmy się, że klient odrzucił tę funkcjonalność :)\n\n// Ustalanie gatunku/gatunków filmu\n// Paginacja\n\nconst API_KEY = '?api_key=fd87aef18dfd3a2446d882cb85b7272d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_URL = '/trending/all/day';\nconst SEARCH_MOVIE_URL = '/search/movie';\nconst DISCOVER_MOVIE_URL = '/discover/movie';\nconst GENRE_MOVIE_LIST_URL = '/genre/movie/list';\nconst GENRE_TV_LIST_URL = '/genre/tv/list';\nconst TRENDING_DAY_URL = '/trending/movie/day';\nconst TRENDING_WEEK_URL = '/trending/movie/week';\n\n// Scenariusz 1: FIRST LOAD krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WEJŚCIU na stronę\nconst fetchFirstLoadMovies = async page => {\n  const response = await fetch(\n    `${BASE_URL}${MAIN_PAGE_URL}${API_KEY}&page=${page}&include_adult=false`,\n  );\n  const firstLoadMovies = await response.json();\n  return firstLoadMovies;\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WPISANIU FILMU\nconst fetchInputMovieTitle = async (page, movieTitle) => {\n  const response = await fetch(\n    `${BASE_URL}${SEARCH_MOVIE_URL}${API_KEY}&query=${movieTitle}&page=${page}&include_adult=false`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Pobranie pojedyńczego filmu/serialu przez Id. Opcje dla type to domyślnie 'movie' (parametr opcjonalny) lub serial 'tv'.\nconst fetchMovieById = async (movieId, type = 'movie') => {\n  const response = await fetch(`${BASE_URL}/${type}/${movieId}${API_KEY}`);\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 3: SEARCH MOVIE krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WYBRANIU GATUNKU z LISTY ROZWIJANEJ\nconst fetchMoviesByGenre = async (page, genre) => {\n  const response = await fetch(\n    `${BASE_URL}${DISCOVER_MOVIE_URL}${API_KEY}&page=${page}&include_adult=false&with_genres=${genre}`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 1: FIRST LOAD krok 2\n// Tworzenie galerii filmów po WEJŚCIU na stronę (lub przeładowaniu)\nlet renderMoviesFirstLoad = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"${media_type}\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"poster of '${title ? title : name}'\"  loading=\"lazy\"/>\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .splice(0, 2)\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">| ${(release_date\n                              ? release_date\n                              : first_air_date\n                              ? first_air_date\n                              : 'no-data'\n                            ).slice(0, 4)}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 2\n// Tworzenie galerii po WPISANIU FILMU w input\nlet renderMoviesInputTitle = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"movie\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"${title ? title : name}\" loading=\"lazy\" />\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .splice(0, 2)\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">${(release_date\n                              ? release_date\n                              : first_air_date\n                              ? first_air_date\n                              : 'no-data'\n                            ).slice(0, 4)}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n//-----------------------------------------------------------------//\n// ZNALEZIENIE LISTY WSZYSTKICH GATUNKÓW FILMÓW\n// z obu podzbiorów bazy danych: Movie oraz TV\n\nconst getAllGenres = async () => {\n  const responseGenresMovie = await fetch(\n    `${BASE_URL}${GENRE_MOVIE_LIST_URL}${API_KEY}&language=en-US`,\n  );\n  const responseGenresTV = await fetch(`${BASE_URL}${GENRE_TV_LIST_URL}${API_KEY}&language=en-US`);\n\n  const genresMovieList = await responseGenresMovie.json();\n  const genresTVList = await responseGenresTV.json();\n\n  const allGenresList = [\n    ...new Map(\n      [...genresMovieList.genres, ...genresTVList.genres].map(genre => [genre['id'], genre]),\n    ).values(),\n  ];\n  allGenresListMain = allGenresList;\n  return allGenresList;\n};\nlet genreResponse;\n\nlet allGenresListMain;\n\n// ZNALEZIENIE NAZW GATUNKÓW FILMÓW Z ICH NUMERÓW ID\n\nconst getMovieGenresNames = async () => {\n  if (!genreResponse) {\n    genreResponse = await getAllGenres();\n  }\n  return genreResponse.reduce((allGenres, genre) => {\n    return { ...allGenres, [genre.id]: genre.name };\n  }, {});\n};\n\nlet printAllGenresList = () => {\n  genresList.innerHTML = '';\n  const markup = allGenresListMain\n    .map(genre => {\n      return `\n                <div>\n                    <ul>\n                        <li class=\"genres\">${genre}</li>\n                    </ul>\n                </div>\n            `;\n    })\n    .join('');\n  return genresList.insertAdjacentHTML('beforeend', markup);\n};\n\nprintAllGenresList;\n\n//-----------------------------------------------------------------//\n\nexport {\n  inputFormButton,\n  inputFormTitle,\n  inputFormGenreChange,\n  galleryOfMovies,\n  paginationButtons,\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  fetchMovieById,\n  fetchMoviesByGenre,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n  noPosterImage,\n};\n","module.exports=[{id:28,name:\"Action\"},{id:12,name:\"Adventure\"},{id:16,name:\"Animation\"},{id:35,name:\"Comedy\"},{id:80,name:\"Crime\"},{id:99,name:\"Documentary\"},{id:18,name:\"Drama\"},{id:10751,name:\"Family\"},{id:14,name:\"Fantasy\"},{id:36,name:\"History\"},{id:27,name:\"Horror\"},{id:10402,name:\"Music\"},{id:9648,name:\"Mystery\"},{id:10749,name:\"Romance\"},{id:878,name:\"Science Fiction\"},{id:10770,name:\"TV Movie\"},{id:53,name:\"Thriller\"},{id:10752,name:\"War\"},{id:37,name:\"Western\"}];","import { fetchMovieById, renderMoviesFirstLoad, galleryOfMovies } from './fetchData';\nimport { addModalListenerFunction } from './modal';\n\nconst getAllLibraryMovies = async (libraryList, listType) => {\n  let moviesList = [];\n  galleryOfMovies.innerHTML = '';\n  listType === 'watchedList'\n    ? galleryOfMovies.setAttribute('data-listtype', 'watched')\n    : galleryOfMovies.setAttribute('data-listtype', 'queue');\n  const tempObj = [];\n\n  if (libraryList != undefined) {\n    for (const movie of libraryList) {\n      let response = await fetchMovieById(movie.movieId, movie.type).then(res => res);\n      response = {\n        ...response,\n        genre_ids: [...response.genres.map(genre => genre.id)],\n        media_type: movie.type,\n      };\n      tempObj.push(response);\n    }\n    moviesList = [...tempObj];\n    await renderMoviesFirstLoad(moviesList);\n    addModalListenerFunction();\n  }\n};\n\nexport { getAllLibraryMovies };\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst addToLibrary = (movieId, type, listType = 'watchedList') => {\n  const libraryList = load(listType);\n  if (libraryList == undefined) {\n    let tempWatchedList = [];\n    tempWatchedList.push({\n      movieId,\n      type,\n    });\n    return save(listType, tempWatchedList);\n  }\n\n  let alreadyInList = false;\n  libraryList.forEach(movie => {\n    if (movie.movieId == movieId && movie.type === type) {\n      alreadyInList = true;\n    }\n  });\n\n  if (alreadyInList) return alert('Movie already on the list.');\n\n  libraryList.push({\n    movieId,\n    type,\n  });\n  return save(listType, libraryList);\n};\n\nconst removeFromLibrary = (movieId, type, listType = 'watchedList') => {\n  let libraryList = load(listType);\n\n  libraryList = libraryList.filter(movie => {\n    if (movie.movieId != movieId) {\n      return movie;\n    }\n  });\n\n  return save(listType, libraryList);\n};\n\nexport { save, load, remove, addToLibrary, removeFromLibrary };\n","import { fetchMovieById, galleryOfMovies, noPosterImage } from './fetchData';\nimport { getAllLibraryMovies } from './libraryHelper';\nimport { addToLibrary, load, removeFromLibrary } from './utils';\nconst modalElement = document.querySelector('[data-modal]');\nconst closeBtn = require('../images/svg/symbol-defs.svg');\n\ndocument.addEventListener('click', event => {\n  if (event.target.matches('[data-modal-close]') || !event.target.closest('.modal')) {\n    modalElement.classList.add('is-hidden');\n  }\n});\ndocument.addEventListener('keydown', e => {\n  if (e.code === 'Escape') {\n    modalElement.classList.add('is-hidden');\n  }\n});\n\nconst addModalListenerFunction = () => {\n  let liElements = document.querySelectorAll('.movie-card');\n  liElements.forEach(element => {\n    element.addEventListener('click', () => {\n      getMovieAndDisplayModal(element.dataset.id, element.dataset.type);\n    });\n  });\n};\n\nconst getMovieAndDisplayModal = async (id, type) => {\n  const movieDetails = await fetchMovieById(id, type);\n  console.log(movieDetails);\n  let onWatched = false;\n  let onQueue = false;\n  load('watchedList')?.forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onWatched = true;\n    }\n  });\n  load('queueList')?.forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onQueue = true;\n    }\n  });\n  modalElement.classList.remove('is-hidden');\n\n  let modalHTML = `\n  <div class=\"modal\">\n      <ul class=\"modal__pic\">\n          <li class=\"pic\">\n              <picture>\n                  <source\n                      src=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}`\n                          : noPosterImage\n                      }\"\n                      srcset=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}`\n                          : noPosterImage\n                      } 2x\"\n                      media=\"(min-width:320px) and (max-width:767px)\"/>\n                  <source\n                      src=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      }\"\n                      srcset=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      } 2x\"\n                      media=\"(min-width:768px) and (max-width:1023px)\"/>\n                  <source\n                      src=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      }\"\n                      srcset=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      } 2x\"\n                      media=\"(min-width:1024px)\"/>\n                  <img src=\"${\n                    movieDetails.poster_path\n                      ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                      : noPosterImage\n                  }\" \n                      alt=\"A FISTFUL OF LEAD\"\n                  />\n              </picture>\n          </li>\n\n          <button class=\"modal__close-btn\" type=\"button\">\n              <svg class=\"modal__close-icon\" viewBox=\"-3 -3 60 55\" data-modal-close>\n              <use xlink:href=\"${closeBtn}#icon-close\"></use>\n              </svg>\n          </button>\n        \n        <ul class=\"modal__description\">\n            <ul class=\"description__list\">\n                <li class=\"description__film\">${\n                  movieDetails.title === undefined ? movieDetails.name : movieDetails.title\n                }</li>\n                    <ul class=\"description__vote\">\n                        <li class=\"vote__text\">Vote / Votes</li>\n                        <li class=\"vote__value\"><span class=\"vote__mark\">${movieDetails.vote_average.toFixed(\n                          1,\n                        )}</span> / <span class=\"votes__mark\">${movieDetails.vote_count}\n                        </span></li>\n                    </ul>\n                    <ul class=\"description__popularity\">\n                        <li class=\"popularity__text\">Popularity</li>\n                        <li class=\"popularity__value\">${movieDetails.popularity.toFixed(1)}</li>\n                    </ul>\n                    <ul class=\"description__title\">\n                        <li class=\"title__text\">Original Title</li>\n                        <li class=\"title__value\">${\n                          movieDetails.original_title === undefined\n                            ? movieDetails.original_name\n                            : movieDetails.original_title\n                        }</li>\n                    </ul>\n                    <ul class=\"description__genre\">\n                        <li class=\"genre__text\">Genre</li>\n                        <li class=\"genre__value\">${[\n                          ...movieDetails.genres.map(genre => genre.name),\n                        ].join(', ')}</li>\n                    </ul>\n                <li class=\"description__header\">ABOUT</li>\n                <li class=\"description__text\">${movieDetails.overview}</li>\n                <ul class=\"description__btn\">\n                    <li><button class=\"watched-btn\">ADD TO WATCHED</button></li>\n                    <li><button class=\"queue-btn\">ADD TO QUEUE</button></li>\n                    <li></li>\n                </ul>\n            </ul>\n        </ul>\n  </div>`;\n  modalElement.innerHTML = modalHTML;\n  let watchedBtn = document.querySelector('.watched-btn');\n  let queueBtn = document.querySelector('.queue-btn');\n\n  if (onWatched) {\n    watchedBtn.innerHTML = 'On List';\n  }\n  if (onQueue) {\n    queueBtn.innerHTML = 'On List';\n  }\n\n  const checkIfOnList = (button, listType, listTypeText) => {\n    let watched;\n    if (listTypeText == undefined) return;\n    if (listTypeText === 'watched') {\n      watched = onWatched;\n    } else if (listTypeText === 'queue') {\n      watched = onQueue;\n    }\n    if (watched) {\n      removeFromLibrary(id, type, listType);\n      button.innerHTML = `Add to ${listTypeText}`;\n    } else {\n      addToLibrary(id, type, listType);\n      button.innerHTML = `Added`;\n    }\n    if (listTypeText === 'watched') {\n      onWatched = !onWatched;\n    } else if (listTypeText === 'queue') {\n      onQueue = !onQueue;\n    }\n  };\n\n  watchedBtn.addEventListener('click', () => {\n    checkIfOnList(watchedBtn, 'watchedList', 'watched');\n    if (\n      document.location.href.includes('library') &&\n      galleryOfMovies.dataset.listtype === 'watched'\n    ) {\n      let tempLibraryList = load('watchedList');\n      getAllLibraryMovies(tempLibraryList, 'watchedList');\n    }\n  });\n  queueBtn.addEventListener('click', () => {\n    checkIfOnList(queueBtn, 'queueList', 'queue');\n    if (\n      document.location.href.includes('library') &&\n      galleryOfMovies.dataset.listtype === 'queue'\n    ) {\n      let tempLibraryList = load('queueList');\n      getAllLibraryMovies(tempLibraryList, 'queueList');\n    }\n  });\n};\n\nexport { getMovieAndDisplayModal, addModalListenerFunction };\n","import {\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  fetchMoviesByGenre,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n} from './fetchData';\nimport { addModalListenerFunction } from './modal';\nconst paginationContainer = document.querySelector('.pagination-container');\n\nconst createPagination = ({ page, total_pages }, query = '', genre = '') => {\n  if (total_pages > 500 && (query != '' || genre != '')) total_pages = 500;\n  paginationContainer.innerHTML = '';\n  //Creating main helper elements.\n  const mainDiv = document.createElement('div');\n  const first = document.createElement('a');\n  const previous = document.createElement('a');\n  const next = document.createElement('a');\n  const last = document.createElement('a');\n  const threeDots1 = document.createElement('a');\n  const threeDots2 = document.createElement('a');\n  mainDiv.classList.add('pagination');\n  first.innerHTML = '&laquo;';\n  previous.innerHTML = '&lt;';\n  next.innerHTML = '&gt;';\n  last.innerHTML = '&raquo;';\n  threeDots1.innerHTML = '...';\n  threeDots2.innerHTML = '...';\n  threeDots1.ariaDisabled = true;\n  threeDots2.ariaDisabled = true;\n\n  if (query != '') {\n    first.addEventListener('click', () => {\n      createLinkInputMovie(1, query);\n    });\n    last.addEventListener('click', () => {\n      createLinkInputMovie(total_pages, query);\n    });\n    if (page > 1) {\n      previous.addEventListener('click', () => {\n        createLinkInputMovie(page - 1, query);\n      });\n    } else {\n      previous.ariaDisabled = true;\n      first.ariaDisabled = true;\n    }\n    if (page < total_pages) {\n      next.addEventListener('click', () => {\n        createLinkInputMovie(page + 1, query);\n      });\n    } else {\n      next.ariaDisabled = true;\n      last.ariaDisabled = true;\n    }\n  } else if (genre != '') {\n    first.addEventListener('click', () => {\n      createLinkGenreMovie(1, genre);\n    });\n    last.addEventListener('click', () => {\n      createLinkGenreMovie(total_pages, genre);\n    });\n    if (page > 1) {\n      previous.addEventListener('click', () => {\n        createLinkGenreMovie(page - 1, genre);\n      });\n    } else {\n      previous.ariaDisabled = true;\n      first.ariaDisabled = true;\n    }\n    if (page < total_pages) {\n      next.addEventListener('click', () => {\n        createLinkGenreMovie(page + 1, genre);\n      });\n    } else {\n      next.ariaDisabled = true;\n      last.ariaDisabled = true;\n    }\n  } else {\n    first.addEventListener('click', () => {\n      createLinkAllMovies(1);\n    });\n    last.addEventListener('click', () => {\n      createLinkAllMovies(total_pages);\n    });\n    if (page > 1) {\n      previous.addEventListener('click', () => {\n        createLinkAllMovies(page - 1);\n      });\n    } else {\n      previous.ariaDisabled = true;\n      first.ariaDisabled = true;\n    }\n    if (page < total_pages) {\n      next.addEventListener('click', () => {\n        createLinkAllMovies(page + 1);\n      });\n    } else {\n      next.ariaDisabled = true;\n      last.ariaDisabled = true;\n    }\n  }\n\n  // Adding the middle pages part.\n  if (total_pages == 1) {\n    return;\n  } else if (total_pages > 1 && total_pages < 6) {\n    mainDiv.appendChild(first);\n    mainDiv.appendChild(previous);\n    generateMainPagesButtons(page, total_pages, query, mainDiv, genre);\n    mainDiv.appendChild(next);\n    mainDiv.appendChild(last);\n  } else {\n    mainDiv.appendChild(first);\n    mainDiv.appendChild(previous);\n    if (page > 3) {\n      mainDiv.appendChild(threeDots1);\n    }\n    generateMainPagesButtons(page, total_pages, query, mainDiv, genre);\n    if (page + 2 < total_pages) {\n      mainDiv.appendChild(threeDots2);\n    }\n    mainDiv.appendChild(next);\n    mainDiv.appendChild(last);\n  }\n  paginationContainer.appendChild(mainDiv);\n};\n\n//Function for creating main anchor tags for pages with listeners\nconst generateMainPagesButtons = (page, total_pages, query, mainDiv, genre) => {\n  let tempPage = page;\n  if (page == 2) tempPage = page - 1;\n  if (page == 3) tempPage = page - 2;\n  if (page == 4) tempPage = page - 3;\n  if (page == 5) tempPage = page - 4;\n  if (total_pages < 6) {\n    for (let index = tempPage; index <= total_pages; index++) {\n      let pageAnchor = document.createElement('a');\n      pageAnchor.innerHTML = index;\n      if (page == index) {\n        pageAnchor.classList.add('active');\n      }\n      if (query != '') {\n        pageAnchor.addEventListener('click', () => {\n          createLinkInputMovie(index, query);\n        });\n      } else if (genre != '') {\n        pageAnchor.addEventListener('click', () => {\n          createLinkGenreMovie(index, genre);\n        });\n      } else {\n        pageAnchor.addEventListener('click', () => {\n          createLinkAllMovies(index);\n        });\n      }\n      mainDiv.appendChild(pageAnchor);\n    }\n  } else {\n    let testPage = page - 2;\n    let testLastPage = page + 2;\n\n    //Testing for cases at the beginning.\n    if (page == 2) {\n      testPage = page - 1;\n      testLastPage = page + 3;\n    } else if (page == 1) {\n      testPage = page;\n      testLastPage = page + 4;\n    }\n\n    //Testing for cases at the end.\n    if (page + 1 == total_pages) {\n      testLastPage = page + 1;\n      testPage = page - 3;\n    } else if (page == total_pages) {\n      testLastPage = page;\n      testPage = page - 4;\n    }\n\n    for (let index = testPage; index <= testLastPage; index++) {\n      let pageAnchor = document.createElement('a');\n      pageAnchor.innerHTML = index;\n      if (page == index) {\n        pageAnchor.classList.add('active');\n      }\n      if (query != '') {\n        pageAnchor.addEventListener('click', () => {\n          createLinkInputMovie(index, query);\n        });\n      } else if (genre != '') {\n        pageAnchor.addEventListener('click', () => {\n          createLinkGenreMovie(index, genre);\n        });\n      } else {\n        pageAnchor.addEventListener('click', () => {\n          createLinkAllMovies(index);\n        });\n      }\n      mainDiv.appendChild(pageAnchor);\n    }\n  }\n};\n\nconst createLinkAllMovies = async page => {\n  let data = await fetchFirstLoadMovies(page);\n  data.results = data.results.filter(movie => !('gender' in movie));\n  await renderMoviesFirstLoad(data.results);\n  addModalListenerFunction();\n  createPagination(data);\n};\nconst createLinkInputMovie = async (page, query) => {\n  let data = await fetchInputMovieTitle(page, query);\n  data.results = data.results.filter(movie => !('gender' in movie));\n  await renderMoviesInputTitle(data.results);\n  addModalListenerFunction();\n  createPagination(data, query);\n};\nconst createLinkGenreMovie = async (page, genre) => {\n  let data = await fetchMoviesByGenre(page, genre);\n  data.results = data.results.filter(movie => !('gender' in movie));\n  await renderMoviesInputTitle(data.results);\n  addModalListenerFunction();\n  createPagination(data, '', genre);\n};\n\nexport { createPagination };\n","import {\n  fetchFirstLoadMovies,\n  fetchMoviesByGenre,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n} from './fetchData';\nimport genresData from './genres.json';\nimport { addModalListenerFunction } from './modal';\nimport { createPagination } from './pagination';\n\nconst handleGenreListClick = selectDivText => {\n  document.querySelector('.search-form__input').value = '';\n  let selectedGenreId;\n  let selectedGenreIdNotFound = false;\n  genresData.forEach(genre => {\n    if (genre.name === selectDivText) {\n      selectedGenreId = genre.id;\n    }\n  });\n  if (selectedGenreId == undefined) selectedGenreIdNotFound = true;\n  getAllMoviesByGenre(selectedGenreId, 1, selectedGenreIdNotFound);\n};\n\nconst getAllMoviesByGenre = async (genre, page, idNotFound) => {\n  try {\n    if (idNotFound) {\n      const array = await fetchFirstLoadMovies(1);\n      await renderMoviesFirstLoad(array.results);\n      addModalListenerFunction();\n      console.log(array);\n      createPagination(array);\n    } else {\n      const data = await fetchMoviesByGenre(page, genre);\n      await renderMoviesInputTitle(data.results);\n      addModalListenerFunction();\n      console.log(data);\n      createPagination(data, '', genre);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport { handleGenreListClick };\n"]}