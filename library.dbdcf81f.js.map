{"version":3,"sources":["js/utils.js","js/fetchData.js","js/modal.js","js/libraryHelper.js","library.js"],"names":["save","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","load","getItem","undefined","parse","remove","removeItem","addToLibrary","movieId","type","listType","libraryList","tempWatchedList","push","alreadyInList","forEach","movie","alert","removeFromLibrary","filter","inputFormTitle","document","querySelector","inputFormButton","inputFormGenreChange","galleryOfMovies","genresList","paginationButtons","noPosterImage","require","API_KEY","BASE_URL","MAIN_PAGE_URL","SEARCH_MOVIE_URL","DISCOVER_MOVIE_URL","GENRE_MOVIE_LIST_URL","GENRE_TV_LIST_URL","TRENDING_DAY_URL","TRENDING_WEEK_URL","fetchFirstLoadMovies","response","fetch","page","firstLoadMovies","json","fetchInputMovieTitle","movieTitle","responseObject","fetchMovieById","fetchMoviesByGenre","genre","renderMoviesFirstLoad","genreName","getMovieGenresNames","innerHTML","markup","data","map","poster_path","title","name","genre_ids","release_date","first_air_date","vote_average","id","media_type","original_title","original_name","splice","join","slice","toFixed","insertAdjacentHTML","renderMoviesInputTitle","getAllGenres","responseGenresMovie","responseGenresTV","genresMovieList","genresTVList","allGenresList","Map","genres","values","allGenresListMain","genreResponse","reduce","allGenres","printAllGenresList","modalElement","closeBtn","addEventListener","event","target","matches","closest","classList","add","e","code","addModalListenerFunction","querySelectorAll","element","getMovieAndDisplayModal","dataset","movieDetails","log","onWatched","onQueue","modalHTML","vote_count","popularity","overview","watchedBtn","queueBtn","checkIfOnList","button","listTypeText","watched","location","href","includes","listtype","tempLibraryList","getAllLibraryMovies","moviesList","setAttribute","tempObj","then","res","watchedButton","queueButton"],"mappings":"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","file":"library.dbdcf81f.js","sourceRoot":"../src","sourcesContent":["const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst addToLibrary = (movieId, type, listType = 'watchedList') => {\n  const libraryList = load(listType);\n  if (libraryList == undefined) {\n    let tempWatchedList = [];\n    tempWatchedList.push({\n      movieId,\n      type,\n    });\n    return save(listType, tempWatchedList);\n  }\n\n  let alreadyInList = false;\n  libraryList.forEach(movie => {\n    if (movie.movieId == movieId && movie.type === type) {\n      alreadyInList = true;\n    }\n  });\n\n  if (alreadyInList) return alert('Movie already on the list.');\n\n  libraryList.push({\n    movieId,\n    type,\n  });\n  return save(listType, libraryList);\n};\n\nconst removeFromLibrary = (movieId, type, listType = 'watchedList') => {\n  let libraryList = load(listType);\n\n  libraryList = libraryList.filter(movie => {\n    if (movie.movieId != movieId) {\n      return movie;\n    }\n  });\n\n  return save(listType, libraryList);\n};\n\nexport { save, load, remove, addToLibrary, removeFromLibrary };\n","const inputFormTitle = document.querySelector('.search-form__input');\nconst inputFormButton = document.querySelector('.search-form__btn');\nconst inputFormGenreChange = document.querySelector('.header__genre-option');\n\nconst galleryOfMovies = document.querySelector('.gallery_movies');\nconst genresList = document.querySelector('.genres');\nconst paginationButtons = document.querySelector('.pagination_buttons');\nconst noPosterImage = require('../images/misc/no_picture.jpg');\n\n// SPIS TREŚCI:\n// Scenariusz 1: FIRST LOAD\n// Scenariusz 2: SEARCH MOVIE\n// Scenariusz 3: GENRE SELECT\n// Scenariusz 4: TRENDING DAY / TRENDING WEEK (Klient odrzucił tę funkcjonalność :)\n\n// Ustalanie gatunku/gatunków filmu\n// Paginacja\n\nconst API_KEY = '?api_key=fd87aef18dfd3a2446d882cb85b7272d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_URL = '/trending/all/day';\nconst SEARCH_MOVIE_URL = '/search/movie';\nconst DISCOVER_MOVIE_URL = '/discover/movie';\nconst GENRE_MOVIE_LIST_URL = '/genre/movie/list';\nconst GENRE_TV_LIST_URL = '/genre/tv/list';\nconst TRENDING_DAY_URL = '/trending/movie/day';\nconst TRENDING_WEEK_URL = '/trending/movie/week';\n\n// Scenariusz 1: FIRST LOAD krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WEJŚCIU na stronę\nconst fetchFirstLoadMovies = async page => {\n  const response = await fetch(\n    `${BASE_URL}${MAIN_PAGE_URL}${API_KEY}&page=${page}&include_adult=false`,\n  );\n  const firstLoadMovies = await response.json();\n  return firstLoadMovies;\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WPISANIU FILMU\nconst fetchInputMovieTitle = async (page, movieTitle) => {\n  const response = await fetch(\n    `${BASE_URL}${SEARCH_MOVIE_URL}${API_KEY}&query=${movieTitle}&page=${page}&include_adult=false`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Pobranie pojedyńczego filmu/serialu przez Id. Opcje dla type to domyślnie 'movie' (parametr opcjonalny) lub serial 'tv'.\nconst fetchMovieById = async (movieId, type = 'movie') => {\n  const response = await fetch(`${BASE_URL}/${type}/${movieId}${API_KEY}`);\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 3: SEARCH MOVIE krok 1\n// Pobranie danych (filmów) do galerii, która wyświetla się po WYBRANIU GATUNKU z LISTY ROZWIJANEJ\nconst fetchMoviesByGenre = async (page, genre) => {\n  const response = await fetch(\n    `${BASE_URL}${DISCOVER_MOVIE_URL}${API_KEY}&page=${page}&include_adult=false&with_genres=${genre}`,\n  );\n  const responseObject = await response.json();\n  return responseObject;\n};\n\n// Scenariusz 1: FIRST LOAD krok 2\n// Tworzenie galerii filmów po WEJŚCIU na stronę (lub przeładowaniu)\nlet renderMoviesFirstLoad = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"${media_type}\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"poster of '${title ? title : name}'\"  loading=\"lazy\"/>\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .splice(0, 2)\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">| ${(release_date\n                              ? release_date\n                              : first_air_date\n                              ? first_air_date\n                              : 'no-data'\n                            ).slice(0, 4)}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n// Scenariusz 2: SEARCH MOVIE krok 2\n// Tworzenie galerii po WPISANIU FILMU w input\nlet renderMoviesInputTitle = async data => {\n  const genreName = await getMovieGenresNames();\n  galleryOfMovies.innerHTML = '';\n  const markup = data\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n        media_type,\n        original_title,\n        original_name,\n      }) => {\n        return `\n                <li class=\"movie-card\" data-id=\"${id}\" data-type=\"movie\">\n                    <img class=\"movie-card__img\" src=\"${\n                      poster_path != null\n                        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                        : noPosterImage\n                    }\" alt=\"${title ? title : name}\" loading=\"lazy\" />\n                    <h2 class=\"movie-card__title\">${title ? title : name}</h2>\n\n                    <div class=\"movie-card__info\">\n                        <p class=\"movie-card__genre-and-year\">\n                            <span class=\"movie-card__genre\">${genre_ids\n                              .map(id => genreName[id])\n                              .splice(0, 2)\n                              .join(', ')}</span>\n                            <span class=\"movie-card__year\">${(release_date\n                              ? release_date\n                              : first_air_date\n                              ? first_air_date\n                              : 'no-data'\n                            ).slice(0, 4)}</span>\n                        </p>\n                        <p class=\"movie-card__vote-average\">${vote_average.toFixed(2)}</p>\n                    </div>\n                </li>\n            `;\n      },\n    )\n    .join('');\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n};\n\n//-----------------------------------------------------------------//\n// ZNALEZIENIE LISTY WSZYSTKICH GATUNKÓW FILMÓW\n// z obu podzbiorów bazy danych: Movie oraz TV\n\nconst getAllGenres = async () => {\n  const responseGenresMovie = await fetch(\n    `${BASE_URL}${GENRE_MOVIE_LIST_URL}${API_KEY}&language=en-US`,\n  );\n  const responseGenresTV = await fetch(`${BASE_URL}${GENRE_TV_LIST_URL}${API_KEY}&language=en-US`);\n\n  const genresMovieList = await responseGenresMovie.json();\n  const genresTVList = await responseGenresTV.json();\n\n  const allGenresList = [\n    ...new Map(\n      [...genresMovieList.genres, ...genresTVList.genres].map(genre => [genre['id'], genre]),\n    ).values(),\n  ];\n  allGenresListMain = allGenresList;\n  return allGenresList;\n};\nlet genreResponse;\n\nlet allGenresListMain;\n\n// ZNALEZIENIE NAZW GATUNKÓW FILMÓW Z ICH NUMERÓW ID\n\nconst getMovieGenresNames = async () => {\n  if (!genreResponse) {\n    genreResponse = await getAllGenres();\n  }\n  return genreResponse.reduce((allGenres, genre) => {\n    return { ...allGenres, [genre.id]: genre.name };\n  }, {});\n};\n\nlet printAllGenresList = () => {\n  genresList.innerHTML = '';\n  const markup = allGenresListMain\n    .map(genre => {\n      return `\n                <div>\n                    <ul>\n                        <li class=\"genres\">${genre}</li>\n                    </ul>\n                </div>\n            `;\n    })\n    .join('');\n  return genresList.insertAdjacentHTML('beforeend', markup);\n};\n\nprintAllGenresList;\n\n//-----------------------------------------------------------------//\n\nexport {\n  inputFormButton,\n  inputFormTitle,\n  inputFormGenreChange,\n  galleryOfMovies,\n  paginationButtons,\n  fetchFirstLoadMovies,\n  fetchInputMovieTitle,\n  fetchMovieById,\n  fetchMoviesByGenre,\n  renderMoviesFirstLoad,\n  renderMoviesInputTitle,\n  noPosterImage,\n};\n","import { fetchMovieById, galleryOfMovies, noPosterImage } from './fetchData';\nimport { getAllLibraryMovies } from './libraryHelper';\nimport { addToLibrary, load, removeFromLibrary } from './utils';\nconst modalElement = document.querySelector('[data-modal]');\nconst closeBtn = require('../images/svg/symbol-defs.svg');\n\ndocument.addEventListener('click', event => {\n  if (event.target.matches('[data-modal-close]') || !event.target.closest('.modal')) {\n    modalElement.classList.add('is-hidden');\n  }\n});\ndocument.addEventListener('keydown', e => {\n  if (e.code === 'Escape') {\n    modalElement.classList.add('is-hidden');\n  }\n});\n\nconst addModalListenerFunction = () => {\n  let liElements = document.querySelectorAll('.movie-card');\n  liElements.forEach(element => {\n    element.addEventListener('click', () => {\n      getMovieAndDisplayModal(element.dataset.id, element.dataset.type);\n    });\n  });\n};\n\nconst getMovieAndDisplayModal = async (id, type) => {\n  const movieDetails = await fetchMovieById(id, type);\n  console.log(movieDetails);\n  let onWatched = false;\n  let onQueue = false;\n  load('watchedList')?.forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onWatched = true;\n    }\n  });\n  load('queueList')?.forEach(movie => {\n    if (movie.movieId == id && movie.type === type) {\n      onQueue = true;\n    }\n  });\n  modalElement.classList.remove('is-hidden');\n\n  let modalHTML = `\n  <div class=\"modal\">\n      <ul class=\"modal__pic\">\n          <li class=\"pic\">\n              <picture>\n                  <source\n                      src=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}`\n                          : noPosterImage\n                      }\"\n                      srcset=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w300/${movieDetails.poster_path}`\n                          : noPosterImage\n                      } 2x\"\n                      media=\"(min-width:320px) and (max-width:767px)\"/>\n                  <source\n                      src=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      }\"\n                      srcset=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      } 2x\"\n                      media=\"(min-width:768px) and (max-width:1023px)\"/>\n                  <source\n                      src=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      }\"\n                      srcset=\"${\n                        movieDetails.poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                          : noPosterImage\n                      } 2x\"\n                      media=\"(min-width:1024px)\"/>\n                  <img src=\"${\n                    movieDetails.poster_path\n                      ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                      : noPosterImage\n                  }\" \n                      alt=\"A FISTFUL OF LEAD\"\n                  />\n              </picture>\n          </li>\n\n          <button class=\"modal__close-btn\" type=\"button\">\n              <svg class=\"modal__close-icon\" viewBox=\"-3 -3 60 55\" data-modal-close>\n              <use xlink:href=\"${closeBtn}#icon-close\"></use>\n              </svg>\n          </button>\n        \n        <ul class=\"modal__description\">\n            <ul class=\"description__list\">\n                <li class=\"description__film\">${\n                  movieDetails.title === undefined ? movieDetails.name : movieDetails.title\n                }</li>\n                    <ul class=\"description__vote\">\n                        <li class=\"vote__text\">Vote / Votes</li>\n                        <li class=\"vote__value\"><span class=\"vote__mark\">${movieDetails.vote_average.toFixed(\n                          1,\n                        )}</span> / <span class=\"votes__mark\">${movieDetails.vote_count}\n                        </span></li>\n                    </ul>\n                    <ul class=\"description__popularity\">\n                        <li class=\"popularity__text\">Popularity</li>\n                        <li class=\"popularity__value\">${movieDetails.popularity.toFixed(1)}</li>\n                    </ul>\n                    <ul class=\"description__title\">\n                        <li class=\"title__text\">Original Title</li>\n                        <li class=\"title__value\">${\n                          movieDetails.original_title === undefined\n                            ? movieDetails.original_name\n                            : movieDetails.original_title\n                        }</li>\n                    </ul>\n                    <ul class=\"description__genre\">\n                        <li class=\"genre__text\">Genre</li>\n                        <li class=\"genre__value\">${[\n                          ...movieDetails.genres.map(genre => genre.name),\n                        ].join(', ')}</li>\n                    </ul>\n                <li class=\"description__header\">ABOUT</li>\n                <li class=\"description__text\">${movieDetails.overview}</li>\n                <ul class=\"description__btn\">\n                    <li><button class=\"watched-btn\">ADD TO WATCHED</button></li>\n                    <li><button class=\"queue-btn\">ADD TO QUEUE</button></li>\n                    <li></li>\n                </ul>\n            </ul>\n        </ul>\n  </div>`;\n  modalElement.innerHTML = modalHTML;\n  let watchedBtn = document.querySelector('.watched-btn');\n  let queueBtn = document.querySelector('.queue-btn');\n\n  if (onWatched) {\n    watchedBtn.innerHTML = 'On List';\n  }\n  if (onQueue) {\n    queueBtn.innerHTML = 'On List';\n  }\n\n  const checkIfOnList = (button, listType, listTypeText) => {\n    let watched;\n    if (listTypeText == undefined) return;\n    if (listTypeText === 'watched') {\n      watched = onWatched;\n    } else if (listTypeText === 'queue') {\n      watched = onQueue;\n    }\n    if (watched) {\n      removeFromLibrary(id, type, listType);\n      button.innerHTML = `Add to ${listTypeText}`;\n    } else {\n      addToLibrary(id, type, listType);\n      button.innerHTML = `Added`;\n    }\n    if (listTypeText === 'watched') {\n      onWatched = !onWatched;\n    } else if (listTypeText === 'queue') {\n      onQueue = !onQueue;\n    }\n  };\n\n  watchedBtn.addEventListener('click', () => {\n    checkIfOnList(watchedBtn, 'watchedList', 'watched');\n    if (\n      document.location.href.includes('library') &&\n      galleryOfMovies.dataset.listtype === 'watched'\n    ) {\n      let tempLibraryList = load('watchedList');\n      getAllLibraryMovies(tempLibraryList, 'watchedList');\n    }\n  });\n  queueBtn.addEventListener('click', () => {\n    checkIfOnList(queueBtn, 'queueList', 'queue');\n    if (\n      document.location.href.includes('library') &&\n      galleryOfMovies.dataset.listtype === 'queue'\n    ) {\n      let tempLibraryList = load('queueList');\n      getAllLibraryMovies(tempLibraryList, 'queueList');\n    }\n  });\n};\n\nexport { getMovieAndDisplayModal, addModalListenerFunction };\n","import { fetchMovieById, renderMoviesFirstLoad, galleryOfMovies } from './fetchData';\nimport { addModalListenerFunction } from './modal';\n\nconst getAllLibraryMovies = async (libraryList, listType) => {\n  let moviesList = [];\n  galleryOfMovies.innerHTML = '';\n  listType === 'watchedList'\n    ? galleryOfMovies.setAttribute('data-listtype', 'watched')\n    : galleryOfMovies.setAttribute('data-listtype', 'queue');\n  const tempObj = [];\n\n  if (libraryList != undefined) {\n    for (const movie of libraryList) {\n      let response = await fetchMovieById(movie.movieId, movie.type).then(res => res);\n      response = {\n        ...response,\n        genre_ids: [...response.genres.map(genre => genre.id)],\n        media_type: movie.type,\n      };\n      tempObj.push(response);\n    }\n    moviesList = [...tempObj];\n    await renderMoviesFirstLoad(moviesList);\n    addModalListenerFunction();\n  }\n};\n\nexport { getAllLibraryMovies };\n","import './sass/main.scss';\nimport { load } from './js/utils';\nimport { getAllLibraryMovies } from './js/libraryHelper';\n\nconst watchedButton = document.querySelector('[js-btn-watched]');\nconst queueButton = document.querySelector('[js-btn-queue]');\n\nlet libraryList = load('watchedList');\n\nwatchedButton.addEventListener('click', () => {\n  queueButton.classList.remove('library__btn--selected');\n  watchedButton.classList.add('library__btn--selected');\n  libraryList = load('watchedList');\n  getAllLibraryMovies(libraryList, 'watchedList');\n});\nqueueButton.addEventListener('click', () => {\n  watchedButton.classList.remove('library__btn--selected');\n  queueButton.classList.add('library__btn--selected');\n  libraryList = load('queueList');\n  getAllLibraryMovies(libraryList, 'queueList');\n});\n\ngetAllLibraryMovies(libraryList, 'watchedList');\n"]}